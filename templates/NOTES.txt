{{- if .Values.sharedVolume.enabled }}
Thank you for installing {{ .Chart.Name }}.

Your release is named {{ .Release.Name }}.

To learn more about the release, try:

  $ helm status {{ .Release.Name }}
  $ helm get values {{ .Release.Name }}

## Getting Started

1. Check that all components are running:

   $ kubectl get pods -n {{ .Release.Namespace }}
   {{- if index .Values "cert-manager" "enabled" }}
   $ kubectl get pods -n cert-manager
   {{- end }}
   {{- if index .Values "csi-driver-nfs" "enabled" }}
   $ kubectl get pods -n kube-system -l app=csi-nfs-controller
   $ kubectl get pods -n kube-system -l app=csi-nfs-node
   {{- end }}

2. Check that the CRDs are installed:

   $ kubectl get crd | grep sharedvolume
   {{- if index .Values "cert-manager" "enabled" }}
   $ kubectl get crd | grep cert-manager
   {{- end }}

3. Verify CSI driver is available:
   {{- if index .Values "csi-driver-nfs" "enabled" }}
   $ kubectl get csidriver
   $ kubectl get storageclass
   {{- end }}

4. Create your first SharedVolume:

   cat <<EOF | kubectl apply -f -
   apiVersion: sv.sharedvolume.io/v1alpha1
   kind: SharedVolume
   metadata:
     name: my-shared-volume
     namespace: default
   spec:
     mountPath: "/shared"
     storage:
       capacity: "10Gi"
     {{- if .Values.global.storageClass }}
     storageClassName: "{{ .Values.global.storageClass }}"
     {{- else }}
     storageClassName: "standard"
     {{- end }}
   EOF

4. Use the volume in a pod with automatic mounting:

   cat <<EOF | kubectl apply -f -
   apiVersion: v1
   kind: Pod
   metadata:
     name: test-pod
     annotations:
       sv.sharedvolume.io/mount: "my-shared-volume:/app/shared"
   spec:
     containers:
     - name: test
       image: busybox
       command: ['sh', '-c', 'echo "Hello from SharedVolume!" > /app/shared/hello.txt && sleep 3600']
   EOF

## Installed Components

✅ Shared Volume Controller: Manages SharedVolume and ClusterSharedVolume resources
{{- if index .Values "nfs-server" "enabled" }}
✅ NFS Server Controller: Manages NFS server instances
{{- end }}
{{- if index .Values "cert-manager" "enabled" }}
✅ cert-manager: Provides TLS certificate management for webhooks
{{- end }}
{{- if index .Values "csi-driver-nfs" "enabled" }}
✅ CSI Driver NFS: Enables NFS volume provisioning via CSI
{{- end }}

## Documentation

- Chart documentation: https://github.com/sharedvolume/shared-volume-helm
- Shared Volume Controller: https://github.com/sharedvolume/shared-volume-controller
- NFS Server Controller: https://github.com/sharedvolume/nfs-server-controller

{{- if .Values.sharedVolume.webhook.enabled }}

## Webhook Configuration

{{- if .Values.sharedVolume.webhook.certManager.enabled }}
Webhook certificates are managed by cert-manager.
{{- else }}
⚠️  WARNING: Webhook certificates are not managed by cert-manager.
Please ensure valid certificates are provided.
{{- end }}

{{- if .Values.sharedVolume.networkPolicy.enabled }}
⚠️  Network policies are enabled. Make sure your namespaces are labeled with:
   {{ .Values.sharedVolume.networkPolicy.webhookNamespaceLabel }}
{{- end }}

{{- end }}

{{- if .Values.sharedVolume.metrics.enabled }}

## Monitoring

{{- if .Values.sharedVolume.metrics.serviceMonitor.enabled }}
✅ ServiceMonitor is enabled for Prometheus monitoring.
{{- else }}
Metrics are available at:
- Shared Volume Controller: http://{{ include "shared-volume.metricsServiceName" . }}.{{ .Release.Namespace }}.svc:{{ .Values.sharedVolume.metrics.port }}/metrics
{{- if index .Values "nfs-server" "enabled" }}
- NFS Server Controller: http://{{ .Release.Name }}-nfs-server-metrics-service.{{ .Release.Namespace }}.svc:{{ index .Values "nfs-server" "metrics" "port" }}/metrics
{{- end }}
{{- end }}

{{- end }}

## Support

For support and questions:
- Issues: https://github.com/sharedvolume/shared-volume-controller/issues
- Discussions: https://github.com/sharedvolume/shared-volume-controller/discussions

{{- else }}
Shared Volume Controller is disabled.
{{- end }}
